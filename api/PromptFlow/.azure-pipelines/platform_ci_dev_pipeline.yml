parameters:
 - name: exec_environment
   displayName: "Execution Environment"
   default: "dev"
 - name: flow_to_execute
   displayName: "type of model to execute"
 - name: deployment_type
   displayName: "determine type of deployment - aks, aml, docker, webapp"
 - name: connection_details
   displayName: "determine the variable containing all connection details"
 - name: registry_details
   displayName: "determine the variable containing acr details"

stages:
    - stage: execute_prompt_experiment
      jobs:
      - job: Execute_ml_Job_Pipeline
        steps:
        - template: templates/configure_azureml_agent.yml

        - template: templates/get_connection_details.yml
        #=====================================
        # Registers experiment dataset in Azure ML as Data Asset
        # Reads appropriate field values from data_config.json based on environment and data purpose
        #=====================================        
        - template: templates/execute_python_code.yml
          parameters:
            step_name: "Register Training Data"
            script_parameter: |
              python -m llmops.common.register_data_asset \
                --subscription_id "$(SUBSCRIPTION_ID)" \
                --data_purpose "training_data" \
                --flow_to_execute ${{ parameters.flow_to_execute }} \
                --env_name ${{ parameters.exec_environment }}

        #=====================================
        # Executes Standard flow for a scenario
        # Generates Reports for each RUN as well as consolidated one
        # Execute a RUN for each unique variant combination (keeping default variant id for other nodes)
        # Loads appropriate experiment data from Azure ML data asset
        # Reads appropriate field values from mapping_config.json based on environment and evaluation flow name
        # Prompt Flow connections should pre-exist 
        # used automatic (serverless) runtime by default
        # writes the RUN ID in run_id.txt file. Used in next step
        #=====================================
        - template: templates/execute_python_code.yml
          parameters:
            step_name: "Execute Standard Flow"
            script_parameter: |
              python -m llmops.common.prompt_pipeline \
                --subscription_id "$(SUBSCRIPTION_ID)" \
                --build_id $(BUILD.BUILDID) \
                --env_name ${{ parameters.exec_environment }} \
                --flow_to_execute ${{ parameters.flow_to_execute }} \
                --data_purpose "training_data" \
                --output_file run_id.txt

        #=====================================
        # Reads run_id.txt file. Assigns it to variable RUN_NAME
        # RUN_NAME Used in next step for evaluation of flows
        #=====================================   
        - task: AzureCLI@2
          displayName: Read Standard Flow run_id
          name: read_run_id
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: bash
            scriptLocation: inlineScript
            workingDirectory: $(System.DefaultWorkingDirectory)
            inlineScript: |
              readarray arr <"run_id.txt"
              run_name=${arr[0]}
              echo $run_name
              echo "##vso[task.setvariable variable=RUN_NAME;isOutput=true;]$run_name"

        #=====================================
        # Registers evaluation dataset in Azure ML as Data Asset
        # Reads appropriate field values from data_config.json based on environment and data purpose
        #=====================================
        - template: templates/execute_python_code.yml
          parameters:
            step_name: "Register Test Data"
            script_parameter: |
              python -m llmops.common.register_data_asset \
                --subscription_id "$(SUBSCRIPTION_ID)" \
                --data_purpose "test_data" \
                --flow_to_execute ${{ parameters.flow_to_execute }} \
                --env_name ${{ parameters.exec_environment }}

        #=====================================
        # Executes all Evaluation flows available for a scenario
        # Generates Reports for each RUN as well as consolidated one
        # Uses each RUN ID as input to run evaluation against
        # Loads appropriate evaluation data from Azure ML data asset
        # Reads appropriate field values from mapping_config.json based on environment and evaluation flow name
        # Prompt Flow connections should pre-exist 
        # used automatic (serverless) runtime by default
        #=====================================
        - template: templates/execute_python_code.yml
          parameters:
            step_name: "Execute Evaluation Flow"
            script_parameter: |
              python -m llmops.common.prompt_eval \
                --subscription_id $(SUBSCRIPTION_ID) \
                --build_id $(BUILD.BUILDID) \
                --env_name "${{ parameters.exec_environment }}" \
                --flow_to_execute ${{ parameters.flow_to_execute }} \
                --data_purpose "test_data" \
                --run_id "$(read_run_id.RUN_NAME)"

        #=====================================
        # Published generated reports in csv and html format
        # Available as pipeline artifacts
        #=====================================
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/reports'
            artifactType: 'pipeline'
            artifactName: 'prompt_reports'

    #=====================================
    # This starts the deployment stage. It will
    # - configure build agent by installing all dependencies
    # - registers the flow with Azure ML registry
    # - gets the latest flow version from registry
    # - deploys the flow to either Kubernetes or AML Compute as real time endpoint.
    #=====================================
    - stage: deploy_prompts
      displayName: deploy_prompts
      dependsOn: 
      - execute_prompt_experiment
      variables:
      - name: run_id_from_submit_job
        value: $[ stageDependencies.execute_prompt_experiment.Execute_ml_Job_Pipeline.outputs['read_run_id.RUN_NAME'] ]
    #=====================================
    # Manual Approval is enabled by default
    # For removal of Manual Approval:
    # Remove the job ApproveDeployment
    # and remove its dependency from job deploy_flow
    #=====================================
      jobs:
      - job: ApproveDeployment
        displayName: Approve for prompt deployment 
        pool: server    
        timeoutInMinutes: 60 # job times out in 60 minutes
        steps:   
        - task: ManualValidation@0
          timeoutInMinutes: 60 # task times out in 60 minutes
          inputs:
            #=====================================
            # Update the notification email id
            #=====================================
            notifyUsers: |
              replace@youremail.com
            instructions: "$(run_id_from_submit_job)"
            onTimeout: 'reject'
      
      - job: deploy_flow
        dependsOn: 
        - ApproveDeployment
        steps:
        - template: templates/get_connection_details.yml
      
        - template: templates/configure_azureml_agent.yml
      
        #=====================================
        # Registers the flow in Azure ML registry
        # Writes latest model version to model_version.txt file.
        # model_version.txt file is read in next step
        #=====================================   
        - template: templates/execute_python_code.yml
          parameters:
            step_name: "Register Standard Flow"
            script_parameter: |
              python -m llmops.common.deployment.register_model \
                --subscription_id $(SUBSCRIPTION_ID) \
                --flow_to_execute ${{ parameters.flow_to_execute }} \
                --output_file "model_version.txt" \
                --build_id $(Build.Buildid) \
                --env_name ${{ parameters.exec_environment }}

        #=====================================
        # Reads model_version.txt file. Assigns it to variable MODEL_VERSION
        # MODEL_VERSION Used in next step for deployment
        #=====================================   
        - task: AzureCLI@2
          displayName: Read Model Version
          name: read_model_version
          inputs:
            azureSubscription: $(AZURE_RM_SVC_CONNECTION)
            scriptType: bash
            scriptLocation: inlineScript
            workingDirectory: $(System.DefaultWorkingDirectory)
            inlineScript: |
              readarray arr <"model_version.txt"
              model_version=${arr[0]}
              echo $model_version
              echo "##vso[task.setvariable variable=MODEL_VERSION;isOutput=true;]$model_version" 

        #=====================================
        # Executes Kubernetes deployment when parameter deployment_type == 'aks'
        # Reads 'kubernetes_endpoint' field values from deployment_config.json
        #=====================================              
        - ${{ if eq(lower(parameters.deployment_type), 'aks') }}:
          - template: templates/kubernetes_deployment.yml  
            parameters:
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              flow_to_execute: ${{ parameters.flow_to_execute }}
              DEPLOY_ENVIRONMENT: ${{ parameters.exec_environment }}
              MODEL_VERSION: $(read_model_version.MODEL_VERSION)
              KEY_VAULT_NAME: $(KEYVAULT_NAME)

        #=====================================
        # Executes AML Compute deployment when parameter deployment_type == 'aml'
        # Reads 'azure_managed_endpoint' field values from deployment_config.json
        #=====================================     
        - ${{ if eq(lower(parameters.deployment_type), 'aml') }}:
          - template: templates/aml_real_deployment.yml 
            parameters:
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              flow_to_execute: ${{ parameters.flow_to_execute }}
              DEPLOY_ENVIRONMENT: ${{ parameters.exec_environment }}
              MODEL_VERSION: $(read_model_version.MODEL_VERSION)
              KEY_VAULT_NAME: $(KEYVAULT_NAME)

        #=====================================
        # Executes Azure Webapp deployment when parameter 
        # deployment_type == 'webapp' using docker image
        # Reads 'webapp_endpoint' field values from deployment_config.json
        #=====================================     
        - ${{ if eq(lower(parameters.deployment_type), 'webapp') }}:
          - template: templates/webapp_deployment.yml 
            parameters:
              FLOW_TO_EXECUTE: ${{ parameters.flow_to_execute }}
              DEPLOY_ENVIRONMENT: ${{ parameters.exec_environment }}
              CONNECTION_DETAILS: ${{ parameters.connection_details }}
              REGISTRY_DETAILS: ${{ parameters.registry_details }}