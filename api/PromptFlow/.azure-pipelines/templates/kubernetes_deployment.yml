parameters:
- name: SUBSCRIPTION_ID
  type: string
- name: flow_to_execute
  type: string
- name: MODEL_VERSION
  type: string
- name: DEPLOY_ENVIRONMENT
  type: string
- name: KEY_VAULT_NAME
  type: string

steps:
- template: execute_python_code.yml
  parameters:
    step_name: "Provision Kubernetes Endpoint"
    script_parameter: |
      python -m llmops.common.deployment.kubernetes_endpoint \
        --subscription_id ${{ parameters.SUBSCRIPTION_ID }} \
        --build_id $(Build.Buildid) \
        --output_file "endpoint_principal.txt" \
        --env_name ${{ parameters.DEPLOY_ENVIRONMENT }} \
        --flow_to_execute ${{ parameters.flow_to_execute }}


- task: AzureCLI@2
  displayName: Read endpoint principal
  name: read_endpoint_principal
  inputs:
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptType: bash
    scriptLocation: inlineScript
    workingDirectory: $(System.DefaultWorkingDirectory)
    inlineScript: |
      readarray arr <"endpoint_principal.txt"
      endpoint_principal=${arr[0]}
      echo $endpoint_principal
      echo "##vso[task.setvariable variable=ENDPOINT_PRINCIPAL;isOutput=true;]$endpoint_principal"
  
- task: AzureCLI@2
  displayName: Assign Permission Deployment
  continueOnError: false
  env: {APPLICATIONINSIGHTS_CONNECTION_STRING: "$(APPLICATIONINSIGHTS-CONNECTION-STRING)"}
  inputs: 
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptType: bash
    workingDirectory: $(System.DefaultWorkingDirectory)
    scriptLocation: inlineScript
    inlineScript: |
      config_path="./${{ parameters.flow_to_execute }}/llmops_config.json"
      env_name=${{ parameters.DEPLOY_ENVIRONMENT }}
      selected_object=$(jq ".envs[] | select(.ENV_NAME == \"$env_name\")" "$config_path")

      if [[ -n "$selected_object" ]]; then
        echo "$selected_object"
        KEY_VAULT_NAME=$(echo "$selected_object" | jq -r '.KEYVAULT_NAME')
        RESOURCE_GROUP_NAME=$(echo "$selected_object" | jq -r '.RESOURCE_GROUP_NAME')
        WORKSPACE_NAME=$(echo "$selected_object" | jq -r '.WORKSPACE_NAME')
      else
        echo "Object in config file not found"
      fi
      echo "assigning permissions to Principal to AzureML workspace.."
      az role assignment create --assignee $(read_endpoint_principal.ENDPOINT_PRINCIPAL) --role "AzureML Data Scientist" --scope "/subscriptions/${{ parameters.SUBSCRIPTION_ID }}/resourcegroups/$RESOURCE_GROUP_NAME/providers/Microsoft.MachineLearningServices/workspaces/$WORKSPACE_NAME"
      
      echo "assigning permissions to Principal to Key vault.."
      auth_type=$(az keyvault show -n $KEY_VAULT_NAME  -g $RESOURCE_GROUP_NAME --query "properties.enableRbacAuthorization")
      if [[ -z "$auth_type" ]]; then
          echo "assigning RBAC permission"
          az role assignment create --assignee $(read_endpoint_principal.ENDPOINT_PRINCIPAL) --role "Key Vault Reader" --scope "/subscriptions/${{ parameters.SUBSCRIPTION_ID }}/resourcegroups/$RESOURCE_GROUP_NAME/providers/Microsoft.KeyVault/vaults/$KEY_VAULT_NAME"
      else
          echo "assigning policy permission"
          az keyvault set-policy --name $KEY_VAULT_NAME --resource-group $RESOURCE_GROUP_NAME --object-id $(read_endpoint_principal.ENDPOINT_PRINCIPAL) --secret-permissions get list
      fi
    
- template: execute_python_code.yml
  parameters:
    step_name: "Provision Kubernetes Based Deployment"
    script_parameter: |
      python -m llmops.common.deployment.kubernetes_deployment \
        --subscription_id ${{ parameters.SUBSCRIPTION_ID }} \
        --model_version ${{ parameters.MODEL_VERSION }} \
        --build_id $(Build.Buildid) \
        --env_name ${{ parameters.DEPLOY_ENVIRONMENT }} \
        --flow_to_execute ${{ parameters.flow_to_execute }}

- template: execute_python_code.yml
  parameters:
    step_name: "Test Kubernetes Endpoint"
    script_parameter: |
      python -m llmops.common.deployment.test_model_on_kubernetes \
        --subscription_id ${{ parameters.SUBSCRIPTION_ID }} \
        --env_name ${{ parameters.DEPLOY_ENVIRONMENT }} \
        --flow_to_execute ${{ parameters.flow_to_execute }}








